<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tdd | crebma]]></title>
  <link href="http://crebma.com/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://crebma.com/"/>
  <updated>2014-01-27T10:26:03-05:00</updated>
  <id>http://crebma.com/</id>
  <author>
    <name><![CDATA[Amber Conville]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learn a Language and EAT!]]></title>
    <link href="http://crebma.com/blog/2014/01/27/learn-a-language-and-eat/"/>
    <updated>2014-01-27T10:05:00-05:00</updated>
    <id>http://crebma.com/blog/2014/01/27/learn-a-language-and-eat</id>
    <content type="html"><![CDATA[<p>Here at <a href="http://detroitlabs.com">Detroit Labs</a>, we get together for an hour and a half weekly to play with a language that is new to all of us (except <a href="http://twitter.com/nathandotz">Nathan Dotz</a> who has toyed with all programming languages ever). We pick a chef for the week, that person brings us in a crock pot of deliciousities, and we all gather round for the first half an hour and go through environment setup together. We try to look at the basic structure of one unit test and maybe how to make a function in said language, and when the clock hits twelve, we are done no matter how far we got. Then we go over the very quick rules and exercise. Our rules:</p>

<ol>
<li>TDD
 -Write the simplest test you can to make progress
 -Write only enough code to make your test pass
 -Only refactor on green!</li>
<li>Pair!!! Ping Pong Style.
 -You write a very simple failing test (non-compiling counts as failing)
 -You pass the keyboard to your pair to make it pass writing only enough code as is necessary
 -Your pair writes another simple failing test and passes the keyboard back</li>
<li>You&rsquo;re not supposed to finish the exercise.</li>
<li>Don&rsquo;t be a wang.</li>
</ol>


<p>That last one is in there just to have the team and individuals hold themselves accountable for not being negative. This is a safe, supportive place where almost none of us have any idea what we’re doing and are there to stumble through the often uncomfortable steps of learning as a team. As for the exercise, we always do the Prime Factors kata. That seems like it might get boring, but think of it like this: you use different katas in your everyday programming language to help you get better at that language. What you know is the language, what you don’t know is the new kata. In our case, we know the kata very well (we spent the first two weeks doing it in two languages we’re familiar with, just to make sure), but it’s the language we don’t know. We have the same balance (using something we know to learn something we don’t), we just flipped the script on what goes where in that equation. For those unfamiliar, the prime factors kata is:</p>

<p>Given an integer, return a list of factors for that integer that are prime numbers. For example:</p>

<table>
<thead>
<tr>
<th align="center">Given </th>
<th align="center">Result  </th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">2   </td>
<td align="center">[2]  </td>
</tr>
<tr>
<td align="center">3  </td>
<td align="center">[3]  </td>
</tr>
<tr>
<td align="center">4  </td>
<td align="center">[2,2]</td>
</tr>
</tbody>
</table>


<p>and so on.</p>

<p>So far, we’ve done java and objective-c (our first two), <a href="http://rust-lang.org">rust</a>, <a href="http://elm-lang.org">elm</a>, and <a href="http://go-lang.com">go</a>. Oh, in case I didn’t mention, we don’t pick the language ahead of time, we just choose from the pool of languages that we have put on a big list to try out. Soon, we’ll have a big wheel to spin and everything, but for now, we just choose at random. Guests are welcome to join, so long as they follow the above rules and RSVP in enough time to warn the week’s chef, so feel free to twitter at us at <a href="http://twitter.com/DetroitLabs">@DetroitLabs</a>, or even just <a href="http://twitter.com/crebma">@crebma</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Trick!]]></title>
    <link href="http://crebma.com/blog/2013/07/18/a-trick/"/>
    <updated>2013-07-18T14:35:00-04:00</updated>
    <id>http://crebma.com/blog/2013/07/18/a-trick</id>
    <content type="html"><![CDATA[<p>After spending a little while trying to figure out how to wrap tests around a bit of code that looked pretty similar to this:</p>

<p>``` objective-c Block within a block
[[NSOperationQueue mainQueue] addOperationWithBlock:^{</p>

<pre><code>            [self.service getAThingWithSuccess:^() {
                [self doOtherStuff];
            } andFailure:^{
                [self ohNoes];
           }];
</code></pre>

<p>```</p>

<p>so I could get at the [self doOtherStuff] parts and test them, I found this stub:withBlock: selector in Kiwi. So, I tried the following:</p>

<p>``` objective-c Auto-execute the blocks!
[[NSOperationQueue mainQueue] stub:@selector(addOperationWithBlock:)</p>

<pre><code>                     withBlock:^id(NSArray *params) {
                            void(^block)(void) = params[0];
                            block();
                            return nil;
                       }];
</code></pre>

<p>```</p>

<p>and it worked perfectly! Woot! In my particular case, I was actually using a kiwi spy to capture that success block sent to the service (though maybe I&rsquo;ll use this new trick instead), so after calling block() in that stub, I was able to immediately get the argument from the spy, whereas all other attempts at trickery were giving me &ldquo;argument not captured&rdquo; issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It's OK to Cheat Sometimes!]]></title>
    <link href="http://crebma.com/blog/2013/07/06/its-ok-to-cheat-sometimes/"/>
    <updated>2013-07-06T12:54:00-04:00</updated>
    <id>http://crebma.com/blog/2013/07/06/its-ok-to-cheat-sometimes</id>
    <content type="html"><![CDATA[<p>Lots of people have strong opinions about what you should and shouldn&rsquo;t do in testing. For the most part, those rules tend to be right. But deep in the heart of a huge legacy codebase, striving for tdd perfection is often a self-defeating goal. Should you be on a path to refactor and test that codebase towards that perfect tdd goal? Of course! But when you first inherit an enormous untested codebase, or are new to tdd and want to start testing your codebase, it is perfectly ok to take some shortcuts. Here are a couple of sticking points I&rsquo;ve seen people hit and then give up entirely.</p>

<p><strong>DISCLAIMER:</strong> These all assume Kiwi use, because that&rsquo;s all I&rsquo;ve used so far. I&rsquo;m sure there&rsquo;s an easy translation, so long as your chosen testing framework has a robust mocking/stubbing framework in it.</p>

<h4>&ldquo;I have business logic in viewWillAppear, and it&rsquo;s heavily tangled with the rest of my controller!&rdquo;</h4>

<p>Spent the last two hours trying to untangle that code so you can extract it to one or more collaborators? It&rsquo;s ok. That&rsquo;s a good goal that should be met, but it doesn&rsquo;t make sense to string out several days and possibly create several bugs in the process of refactoring untested code. It can be worthwhile to &ldquo;boy scout&rdquo; that code little by little. What that means is that you leave that code a little better than you found it. Perhaps not sparkling clean, but a little better every time you touch it. A shortcut you can use to start heading in that direction is to extract everything that&rsquo;s not [super viewWillAppear] into a separate method, or even just the logical block that contains the logic you are touching. In your spec, use a class extension to declare that method in a place where your specs can see them, but the rest of your production code cannot. Now you can write characterization tests around that private method that will help build a foundation for safe future refactoring.</p>

<h4>&ldquo;This controller uses ivars all over the place that I can&rsquo;t modify!&rdquo;</h4>

<p>This one is not a shortcut, but it is an easy fix. Convert that ivar to a property. If it&rsquo;s a private ivar, here&rsquo;s where the same afore mentioned shortcut comes in: declare that property in a class extension in your specs.</p>

<h4>&ldquo;This chunk of code makes a UIAlertView but I&rsquo;m not actually touching that code so I don&rsquo;t want to deal with it!&rdquo;</h4>

<p>Stub the alloc/init methods. I know, it&rsquo;s hard to hear. You might even be wincing right now. But seriously. Factory type methods might be better, but if you&rsquo;ve already chosen a different spot in that chunk of code to boy scout, it can be helpful to stub so as not to invoke UI code.</p>

<p>Again, I just want to reiterate that these should be used as stop gap measures. You know you&rsquo;re doing it right (and should feel AWESOME) as soon as you can remove these dirty little workarounds. But iOS code had been around long enough now that legacy codebases not only exist, but have grown into unmaintainable masses.</p>
]]></content>
  </entry>
  
</feed>
