<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[crebma]]></title>
  <link href="http://crebma.com/atom.xml" rel="self"/>
  <link href="http://crebma.com/"/>
  <updated>2015-08-07T12:44:39-04:00</updated>
  <id>http://crebma.com/</id>
  <author>
    <name><![CDATA[Amber Conville]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learn a Language and EAT!]]></title>
    <link href="http://crebma.com/blog/2014/01/27/learn-a-language-and-eat/"/>
    <updated>2014-01-27T10:05:00-05:00</updated>
    <id>http://crebma.com/blog/2014/01/27/learn-a-language-and-eat</id>
    <content type="html"><![CDATA[<p>Here at <a href="http://detroitlabs.com">Detroit Labs</a>, we get together for an hour and a half weekly to play with a language that is new to all of us (except <a href="http://twitter.com/nathandotz">Nathan Dotz</a> who has toyed with all programming languages ever). We pick a chef for the week, that person brings us in a crock pot of deliciousities, and we all gather round for the first half an hour and go through environment setup together. We try to look at the basic structure of one unit test and maybe how to make a function in said language, and when the clock hits twelve, we are done no matter how far we got. Then we go over the very quick rules and exercise. Our rules:</p>

<ol>
<li>TDD

<ul>
<li>Write the simplest test you can to make progress</li>
<li>Write only enough code to make your test pass</li>
<li>Only refactor on green!</li>
</ul>
</li>
<li>Pair!!! Ping Pong Style.

<ul>
<li>You write a very simple failing test (non-compiling counts as failing)</li>
<li>You pass the keyboard to your pair to make it pass writing only enough code as is necessary</li>
<li>Your pair writes another simple failing test and passes the keyboard back</li>
</ul>
</li>
<li>You&rsquo;re not supposed to finish the exercise.</li>
<li>Don&rsquo;t be a wang.</li>
</ol>


<p>That last one is in there just to have the team and individuals hold themselves accountable for not being negative. This is a safe, supportive place where almost none of us have any idea what we’re doing and are there to stumble through the often uncomfortable steps of learning as a team. As for the exercise, we always do the Prime Factors kata. That seems like it might get boring, but think of it like this: you use different katas in your everyday programming language to help you get better at that language. What you know is the language, what you don’t know is the new kata. In our case, we know the kata very well (we spent the first two weeks doing it in two languages we’re familiar with, just to make sure), but it’s the language we don’t know. We have the same balance (using something we know to learn something we don’t), we just flipped the script on what goes where in that equation. For those unfamiliar, the prime factors kata is:</p>

<p>Given an integer, return a list of factors for that integer that are prime numbers. For example:</p>

<table>
<thead>
<tr>
<th align="center">Given </th>
<th align="center">Result  </th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">2   </td>
<td align="center">[2]  </td>
</tr>
<tr>
<td align="center">3  </td>
<td align="center">[3]  </td>
</tr>
<tr>
<td align="center">4  </td>
<td align="center">[2,2]</td>
</tr>
</tbody>
</table>


<p>and so on.</p>

<p>So far, we’ve done java and objective-c (our first two), <a href="http://rust-lang.org">rust</a>, <a href="http://elm-lang.org">elm</a>, and <a href="http://go-lang.com">go</a>. Oh, in case I didn’t mention, we don’t pick the language ahead of time, we just choose from the pool of languages that we have put on a big list to try out. Soon, we’ll have a big wheel to spin and everything, but for now, we just choose at random. Guests are welcome to join, so long as they follow the above rules and RSVP in enough time to warn the week’s chef, so feel free to twitter at us at <a href="http://twitter.com/DetroitLabs">@DetroitLabs</a>, or even just <a href="http://twitter.com/crebma">@crebma</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CodeMash 2014]]></title>
    <link href="http://crebma.com/blog/2014/01/11/codemash-2014/"/>
    <updated>2014-01-11T18:03:00-05:00</updated>
    <id>http://crebma.com/blog/2014/01/11/codemash-2014</id>
    <content type="html"><![CDATA[<p>I had the honor of being invited to speak at Codemash 2014, which was my very first big conference talk. Here are my slides, and here&rsquo;s the link to the example codebase: <a href="https://github.com/crebma/IslaNublar">https://github.com/crebma/IslaNublar</a></p>

<script async="true" class="speakerdeck-embed" data-id="f69277005b9801317a1c324f8be9e4a6" src="http://crebma.com//speakerdeck.com/assets/embed.js"> </script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Trick!]]></title>
    <link href="http://crebma.com/blog/2013/07/18/a-trick/"/>
    <updated>2013-07-18T14:35:00-04:00</updated>
    <id>http://crebma.com/blog/2013/07/18/a-trick</id>
    <content type="html"><![CDATA[<p>After spending a little while trying to figure out how to wrap tests around a bit of code that looked pretty similar to this:</p>

<figure class='code'><figcaption><span>Block within a block</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[</span><span class="n">NSOperationQueue</span> <span class="n">mainQueue</span><span class="p">]</span> <span class="nl">addOperationWithBlock:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">service</span> <span class="nl">getAThingWithSuccess:</span><span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="p">[</span><span class="n">self</span> <span class="n">doOtherStuff</span><span class="p">];</span>
</span><span class='line'>              <span class="p">}</span> <span class="nl">andFailure:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">self</span> <span class="n">ohNoes</span><span class="p">];</span>
</span><span class='line'>               <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>so I could get at the [self doOtherStuff] parts and test them, I found this stub:withBlock: selector in Kiwi. So, I tried the following:</p>

<figure class='code'><figcaption><span>Auto-execute the blocks!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[</span><span class="n">NSOperationQueue</span> <span class="n">mainQueue</span><span class="p">]</span> <span class="nl">stub:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">addOperationWithBlock:</span><span class="p">)</span>
</span><span class='line'>                       <span class="nl">withBlock:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                              <span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="n">block</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>                              <span class="n">block</span><span class="p">();</span>
</span><span class='line'>                              <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>                         <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>and it worked perfectly! Woot! In my particular case, I was actually using a kiwi spy to capture that success block sent to the service (though maybe I&rsquo;ll use this new trick instead), so after calling block() in that stub, I was able to immediately get the argument from the spy, whereas all other attempts at trickery were giving me &ldquo;argument not captured&rdquo; issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It's OK to Cheat Sometimes!]]></title>
    <link href="http://crebma.com/blog/2013/07/06/its-ok-to-cheat-sometimes/"/>
    <updated>2013-07-06T12:54:00-04:00</updated>
    <id>http://crebma.com/blog/2013/07/06/its-ok-to-cheat-sometimes</id>
    <content type="html"><![CDATA[<p>Lots of people have strong opinions about what you should and shouldn&rsquo;t do in testing. For the most part, those rules tend to be right. But deep in the heart of a huge legacy codebase, striving for tdd perfection is often a self-defeating goal. Should you be on a path to refactor and test that codebase towards that perfect tdd goal? Of course! But when you first inherit an enormous untested codebase, or are new to tdd and want to start testing your codebase, it is perfectly ok to take some shortcuts. Here are a couple of sticking points I&rsquo;ve seen people hit and then give up entirely.</p>

<p><strong>DISCLAIMER:</strong> These all assume Kiwi use, because that&rsquo;s all I&rsquo;ve used so far. I&rsquo;m sure there&rsquo;s an easy translation, so long as your chosen testing framework has a robust mocking/stubbing framework in it.</p>

<h4>&ldquo;I have business logic in viewWillAppear, and it&rsquo;s heavily tangled with the rest of my controller!&rdquo;</h4>

<p>Spent the last two hours trying to untangle that code so you can extract it to one or more collaborators? It&rsquo;s ok. That&rsquo;s a good goal that should be met, but it doesn&rsquo;t make sense to string out several days and possibly create several bugs in the process of refactoring untested code. It can be worthwhile to &ldquo;boy scout&rdquo; that code little by little. What that means is that you leave that code a little better than you found it. Perhaps not sparkling clean, but a little better every time you touch it. A shortcut you can use to start heading in that direction is to extract everything that&rsquo;s not [super viewWillAppear] into a separate method, or even just the logical block that contains the logic you are touching. In your spec, use a class extension to declare that method in a place where your specs can see them, but the rest of your production code cannot. Now you can write characterization tests around that private method that will help build a foundation for safe future refactoring.</p>

<h4>&ldquo;This controller uses ivars all over the place that I can&rsquo;t modify!&rdquo;</h4>

<p>This one is not a shortcut, but it is an easy fix. Convert that ivar to a property. If it&rsquo;s a private ivar, here&rsquo;s where the same afore mentioned shortcut comes in: declare that property in a class extension in your specs.</p>

<h4>&ldquo;This chunk of code makes a UIAlertView but I&rsquo;m not actually touching that code so I don&rsquo;t want to deal with it!&rdquo;</h4>

<p>Stub the alloc/init methods. I know, it&rsquo;s hard to hear. You might even be wincing right now. But seriously. Factory type methods might be better, but if you&rsquo;ve already chosen a different spot in that chunk of code to boy scout, it can be helpful to stub so as not to invoke UI code.</p>

<p>Again, I just want to reiterate that these should be used as stop gap measures. You know you&rsquo;re doing it right (and should feel AWESOME) as soon as you can remove these dirty little workarounds. But iOS code had been around long enough now that legacy codebases not only exist, but have grown into unmaintainable masses.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[code attack!]]></title>
    <link href="http://crebma.com/blog/2013/07/05/code-attack/"/>
    <updated>2013-07-05T22:48:00-04:00</updated>
    <id>http://crebma.com/blog/2013/07/05/code-attack</id>
    <content type="html"><![CDATA[<p>One day, we at <a href="http://craftsmanguild.org">Craftsman Guild</a> decided we wanted to have a mini code retreat. That is to say, we wanted to swap pairs, delete code, and learn from one another in the two hours that we have for our user group.</p>

<p>So, using the same basic rules as a code retreat, but with an abbreviated format, we managed to make a worthwhile learning experience in our two hours. We cut exercises down to 20 minutes each, with a maximum of 5 minutes of retrospective. At least one half of each pair has to know how to use the pair&rsquo;s chosen language, as well as have the environment and testing framework already setup to save time. We also stuck with <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Conway&rsquo;s game of life</a> as a problem most people are familiar with and have worked through before. It actually worked out spectacularly! We have done it several times since, and every time, everyone involved learns something new and has an amazing time. We even manage to use different code retreat exercises (3-5 lines max, no ifs, no loops, etc), and have done these exercises both with and without the facilitator participating in pairs. As a note, if the group is not made up of people who have been to code retreats in the past, it usually works best to have a facilitator who is walking around and helping/guiding.</p>

<p>Given that a code retreat is something that conforms to a certain set of relatively <a href="http://coderetreat.org/facilitating">strict rules and guidelines</a>, much internet sassing back and forth occured, and <a href="http://twitter.com/timwingfield">Tim Wingfield</a> came up with a brilliant idea. If it can&rsquo;t be a code retreat, we should call it a code attack! So we gave these mini code retreats a better name, and they were born in May of 2011.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is this your first time in prison?]]></title>
    <link href="http://crebma.com/blog/2011/04/01/is-this-your-first-time-in-prison/"/>
    <updated>2011-04-01T13:38:00-04:00</updated>
    <id>http://crebma.com/blog/2011/04/01/is-this-your-first-time-in-prison</id>
    <content type="html"><![CDATA[<p>I got asked that question three to four times, and each time was a bit more perplexed. Was I expected to have been in a prison before? The last time, though, at lunch, someone followed it up with, &ldquo;you seem pretty comfortable.&rdquo; That alone seems like a worthwhile story, to me.</p>

<p>BUT WAIT! THERE&rsquo;S MORE! There&rsquo;s all of the context, and the actual point, and all the fun bits! Details galore!</p>

<p>So I work with this guy, Dan Wiebe. We both work at Pillar. Dan is an all-around, generally awesome fellow already, but additionally, he works with the LifeLine program to teach guys in prison Java. LifeLine is not just about java, it&rsquo;s also about tons of other awesome programs, but one of them happens to be programming. ANYway, he has had a few code retreats in prison, and I missed them for one reason or another, but this last one, I actually got to go.</p>

<p>I&rsquo;ll admit, I was a bit nervous immediately beforehand. I was pretty certain I would say every wrong thing that could ever be said, and offend everyone. To make things worse, Dan had been talking me up to the prisoners, so I was certain I was not going to live up to expectations. And I was wearing these TERRIBLE pants that I bought the night before at T.J. Maxx because you can&rsquo;t wear denim to prison for some reason. They were man-pants, and the waist bits were <em>just</em> too tight, being the wrong shape and all.</p>

<p>So anyway, we went inside, and were escorted by correctional officers (NOT GUARDS AT ALL) to a computer lab of sorts. Many pairing (or tripling) stations were set up all over the place. We had a quick chat and then dove right in. The problem itself was tennis, a game which I have never played, and am still a little frustrated with. Love? Really? Not zero?</p>

<p>My first triple was with Jason and Adam, and we ping-ponged between the three of us. I got to tell them some neat shortcuts, and they called me a showoff. We had some good discussions about the steps we were taking and decisions we were making throughout. Really cool.</p>

<p>Then we went to lunch, which was in the lunch room (or whatever it&rsquo;s called in prison) with all the prisoners, not just programming ones. Somehow, I got to the front of the lunch line, which was terrible, because I had no idea what to do. Luckily, a java guy (Lee) was right behind me, and he told me what to do, where to get silverware, and where the milk bags were. That&rsquo;s right, milk bags!! Lee and I sat with Ron and another fellow whose name I sadly cannot remember, and chatted about hamcrest and guava while we ate lunch. Turns out, they had hamcrest, but were not necessarily sure how to use it just yet (not even sure if I am). Lunch was not as bad as some made it seem like it might be, but I&rsquo;m not lining up to eat it at any restaurant. The guys did mention that it was probably the best meal they get, but I&rsquo;m just saying. It wasn&rsquo;t terrible.</p>

<p>After lunch, I tripled with Ron and Wes. The first thing we did, even though it may not have been necessary, was make a custom hamcrest matcher. There is nothing quite like the joy of showing another programmer how to make a custom hamcrest matcher. There is always the moment where all becomes clear, and everyone involved experiences pure joy for some small amount of milliseconds. Tears almost come out of yours eyes, but then you remember where you are. It&rsquo;s wonderful. Beyond that, we had more interesting discussions about steps we were taking and decisions we were making. Until almost the end, I found it extremely interesting that we were writing the exact same codebase as we had written in the first triple. And I deleted that code in the beginning, I swear! And REALLY, I was not driving that thing! Ping pong all the way!! At the very end, Wes began working on an enum which would know that love really secretly meant zero, and all the other silliness, but time was up before he could fully relate to us his grand scheme. Sometime just before the end, Dan asked if volunteers would want to stay later if we were allowed, to which I responded, &ldquo;Yeah, I&rsquo;m having fun, why not? I&rsquo;ll stay.&rdquo; The guys I was tripling with thought that was pretty funny. &ldquo;You NEVER hear that in here,&rdquo; they said.</p>

<p>On a personal/social interaction note, I felt ridiculous just in the nick of time about any complaints I had while talking with any of the guys. At one point, one of the guys was talking about having gotten a small amount of sleep the night before. My first thought was, &ldquo;Yeah, me too, that hotel bed was terrible!&rdquo; Luckily I caught myself before it came out of my mouth, because that would really just be ridiculous. I instantly felt like a spoiled brat for having thought so poorly of the hotel.</p>

<p>At the very end, another guy, Mark, was showing us all of the animations he had made. They were AMAZING. He had made a few characters for his family and various prison events, and he had everything from short animated episodes to games. Really neat. He made an episode specifically for our code retreat, which was shown after lunch. He said he had all the computers in the lab doing a network rendering of the animation. This is a thing I didn&rsquo;t even know could happen, and it sounds super-impressive. Lee also showed us some software that he was working on for the prison that looked REALLY nice. I would have liked to see more of that, but our escort arrived, and we had to leave.</p>

<p>After that, we reconvened at a Bob Evans nearby to talk about our day. The best conclusion I could come up with at the time was that I would gladly take any of those guys on my team. Also, it was astounding to see people actually try to discuss and understand. Even when they started to get frustrated, inevitably, without fail, it would change right into something like, &ldquo;this is the area where I need the most work,&rdquo; or, &ldquo;alright, I want to see what you guys are talking about, let&rsquo;s do that.&rdquo; Really cool. On the outside, people do a lot of getting upset and acting like children. That was really refreshing/amazing to be a part of.</p>

<p>All in all, I would totally go back. Without question. I hope I&rsquo;m available next time around, and if given the chance I will gladly teach people about guava. Because it makes java much more reasonable.</p>
]]></content>
  </entry>
  
</feed>
